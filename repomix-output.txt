This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-13T09:33:55.792Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
/
  Users/
    raphaeldoukhan/
      Desktop/
        numerair/
          src/
            eval.rs
            lib.rs

================================================================
Repository Files
================================================================

================
File: /Users/raphaeldoukhan/Desktop/numerair/src/eval.rs
================
use num_traits::One;
use stwo_prover::constraint_framework::EvalAtRow;

/// Evaluates the constraint for addition of fixed point numbers.
pub fn eval_add<E: EvalAtRow>(eval: &mut E, lhs: E::F, rhs: E::F, out: E::F) {
    eval.add_constraint(out - (lhs + rhs));
}

/// Evaluates the constraint for subtraction of fixed point numbers.
pub fn eval_sub<E: EvalAtRow>(eval: &mut E, lhs: E::F, rhs: E::F, out: E::F) {
    eval.add_constraint(out - (lhs - rhs));
}

/// Evaluates the constraints for fixed point multiplication
pub fn eval_mul<E: EvalAtRow>(
    eval: &mut E,
    lhs: E::F,   // First fixed point number
    rhs: E::F,   // Second fixed point number
    scale: E::F, // The scale factor (2^DEFAULT_SCALE)
    out: E::F,   // The output fixed point number
) {
    // First compute the raw product
    let prod = eval.add_intermediate(lhs * rhs);

    // Then constrain the division by scale factor using signed_div_rem
    // out = prod / scale (quotient)
    // rem = prod % scale (remainder)
    let rem = eval.next_trace_mask();
    eval_signed_div_rem(eval, prod, scale, out, rem);
}

/// Evaluates the constraints for the signed division and remainder.
pub fn eval_signed_div_rem<E: EvalAtRow>(
    eval: &mut E,
    value: E::F, // The value being divided
    div: E::F,   // The divisor
    q: E::F,     // The quotient output
    r: E::F,     // The remainder output
) {
    // Core relationship: value = q * div + r
    eval.add_constraint(value - (q * div.clone() + r.clone()));

    // Constraint that the remainder is less than the divisor
    // We do this by adding a new slack variable s such that r + s = div - 1
    let s = eval.next_trace_mask();
    eval.add_constraint(r + s - (div - E::F::one()));
}

#[cfg(test)]
mod tests {

    use num_traits::Zero;
    use rand::{rngs::StdRng, Rng, SeedableRng};
    use stwo_prover::{
        constraint_framework::{self, preprocessed_columns::gen_is_first, FrameworkEval},
        core::{
            backend::{Col, Column, CpuBackend},
            fields::{
                m31::{M31, P},
                qm31::SecureField,
            },
            pcs::TreeVec,
            poly::{
                circle::{CanonicCoset, CircleEvaluation},
                BitReversedOrder,
            },
        },
    };

    use crate::FixedM31;

    use super::*;

    struct TestEval {
        log_size: u32,
        op: Op,
        total_sum: SecureField,
    }

    #[derive(Clone, Copy)]
    enum Op {
        Add,
        Sub,
        Mul,
        SignedDivRem,
    }

    impl FrameworkEval for TestEval {
        fn log_size(&self) -> u32 {
            self.log_size
        }

        fn max_constraint_log_degree_bound(&self) -> u32 {
            self.log_size + 1
        }

        fn evaluate<E: EvalAtRow>(&self, mut eval: E) -> E {
            match self.op {
                Op::Add => {
                    let lhs = eval.next_trace_mask();
                    let rhs = eval.next_trace_mask();
                    let out = eval.next_trace_mask();
                    eval_add(&mut eval, lhs, rhs, out)
                }
                Op::Sub => {
                    let lhs = eval.next_trace_mask();
                    let rhs = eval.next_trace_mask();
                    let out = eval.next_trace_mask();
                    eval_sub(&mut eval, lhs, rhs, out)
                }
                _ => {}
            }
            eval
        }
    }

    fn columns_to_evaluations(
        cols: Vec<Vec<M31>>,
        domain: CanonicCoset,
    ) -> Vec<CircleEvaluation<CpuBackend, M31, BitReversedOrder>> {
        cols.into_iter()
            .map(|col| {
                let mut trace_col = Col::<CpuBackend, M31>::zeros(1 << domain.log_size());
                for (i, val) in col.iter().enumerate() {
                    trace_col.set(i, *val);
                }
                CircleEvaluation::new(domain.circle_domain(), trace_col)
            })
            .collect()
    }

    fn test_op(op: Op, input_values: Vec<FixedM31>, expected_output: FixedM31) {
        const LOG_SIZE: u32 = 4;
        let domain = CanonicCoset::new(LOG_SIZE);
        let size = 1 << LOG_SIZE;

        // Convert inputs and outputs to M31
        let inputs: Vec<M31> = input_values.iter().map(|x| x.0).collect();
        let output = expected_output.0;

        // Generate trace
        let mut trace_cols = vec![Vec::new(); inputs.len() + 1];
        for _ in 0..size {
            for (i, input) in inputs.iter().enumerate() {
                trace_cols[i].push(*input);
            }
            println!("Output: {:?}", output);
            trace_cols[inputs.len()].push(output);
        }

        let trace_evals = columns_to_evaluations(trace_cols.clone(), domain);
        let trace = TreeVec::new(vec![vec![gen_is_first(LOG_SIZE)], trace_evals, Vec::new()]);

        let trace_polys = trace.map_cols(|c| c.interpolate());

        let component = TestEval {
            log_size: LOG_SIZE,
            total_sum: SecureField::zero(),
            op,
        };

        // Test valid trace
        constraint_framework::assert_constraints(
            &trace_polys,
            domain,
            |eval| {
                component.evaluate(eval);
            },
            (SecureField::zero(), None),
        );

        // Test invalid trace - modify the output column
        let mut invalid_trace_cols = trace_cols;
        if let Some(last_col) = invalid_trace_cols.last_mut() {
            for val in last_col.iter_mut() {
                val.0 = (val.0 + 1) % P;
            }
        }

        let invalid_trace_evals = columns_to_evaluations(invalid_trace_cols, domain);
        let invalid_trace = TreeVec::new(vec![
            vec![gen_is_first(LOG_SIZE)],
            invalid_trace_evals,
            Vec::new(),
        ]);

        let invalid_trace_polys = invalid_trace.map_cols(|c| c.interpolate());

        // This should panic for invalid trace
        let result = std::panic::catch_unwind(|| {
            constraint_framework::assert_constraints(
                &invalid_trace_polys,
                domain,
                |eval| {
                    component.evaluate(eval);
                },
                (SecureField::zero(), None),
            );
        });
        assert!(result.is_err());
    }

    #[test]
    fn test_random_add() {
        let mut rng = StdRng::seed_from_u64(42);
        for _ in 0..100 {
            let a = FixedM31::new((rng.gen::<f64>() - 0.5) * 200.0);
            let b = FixedM31::new((rng.gen::<f64>() - 0.5) * 200.0);

            test_op(Op::Add, vec![a, b], a + b);
        }
    }

    #[test]
    fn test_random_sub() {
        let mut rng = StdRng::seed_from_u64(42);
        for _ in 0..100 {
            let a = FixedM31::new((rng.gen::<f64>() - 0.5) * 200.0);
            let b = FixedM31::new((rng.gen::<f64>() - 0.5) * 200.0);
            test_op(Op::Sub, vec![a, b], a - b);
        }
    }
}

================
File: /Users/raphaeldoukhan/Desktop/numerair/src/lib.rs
================
use std::ops::{Add, Mul, Sub};
use stwo_prover::core::fields::m31::{M31, P};

pub mod eval;

/// Fixed point number implementation over M31 field
/// The value is stored as 2^scale * x
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct FixedM31(pub M31);

pub const DEFAULT_SCALE: u32 = 12;
// Pre-compute scale factor as M31 field element
pub const SCALE_FACTOR: M31 = M31::from_u32_unchecked(1 << DEFAULT_SCALE);

impl FixedM31 {
    pub fn new(x: f64) -> Self {
        // Scale and round the float value
        let scaled = (x * (1u64 << DEFAULT_SCALE) as f64).round() as i64;

        if scaled >= 0 {
            // For positive numbers, directly convert to field element
            FixedM31(M31::from(scaled as u32))
        } else {
            // For negative numbers, add P to make it a valid M31 value
            FixedM31(M31::from((P as i64 + scaled) as u32))
        }
    }

    pub fn to_f64(&self) -> f64 {
        // Convert back to float by dividing by scale factor
        let val = if self.0 .0 > P / 2 {
            -((P - self.0 .0) as f64)
        } else {
            self.0 .0 as f64
        };
        val / (1u64 << DEFAULT_SCALE) as f64
    }

    pub fn abs(&self) -> Self {
        if self.0 .0 > P / 2 {
            FixedM31(-self.0)
        } else {
            *self
        }
    }

    pub fn is_negative(&self) -> bool {
        self.0 .0 > P / 2
    }

    pub fn signed_div_rem(&self, div: M31) -> (FixedM31, FixedM31) {
        let value = self.0 .0;
        let divisor = div.0;

        // Handle the case when value is positive (< P/2)
        if value <= P / 2 {
            let q = value / divisor;
            let r = value % divisor;
            return (FixedM31(M31(q)), FixedM31(M31(r)));
        }

        // Handle negative values (> P/2)
        // Convert to positive representation first
        let pos_value = P - value;

        // Calculate positive quotient and remainder
        let q = pos_value / divisor;
        let r = pos_value % divisor;

        if r == 0 {
            // If remainder is 0, just negate the quotient
            (FixedM31(M31(P - q)), FixedM31(M31(0)))
        } else {
            // If there's a remainder, adjust quotient and remainder
            // q = -(q + 1)
            // r = divisor - remainder
            (FixedM31(M31(P - (q + 1))), FixedM31(M31(divisor - r)))
        }
    }
}

impl Add for FixedM31 {
    type Output = Self;

    fn add(self, rhs: Self) -> Self {
        // Field addition preserves the scale factor
        FixedM31(self.0 + rhs.0)
    }
}

impl Sub for FixedM31 {
    type Output = Self;

    fn sub(self, rhs: Self) -> Self {
        // Field subtraction preserves the scale factor
        FixedM31(self.0 - rhs.0)
    }
}

impl Mul for FixedM31 {
    type Output = Self;

    fn mul(self, rhs: Self) -> Self {
        let prod = self.0 * rhs.0;

        let (res, _) = FixedM31(prod).signed_div_rem(SCALE_FACTOR);

        res
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use rand::rngs::StdRng;
    use rand::{Rng, SeedableRng};

    const EPSILON: f64 = 1e-2;

    fn assert_near(a: f64, b: f64) {
        assert!((a - b).abs() < EPSILON, "Expected {} to be near {}", a, b);
    }

    #[test]
    fn test_basic_ops() {
        let a = FixedM31::new(3.5);
        let b = FixedM31::new(2.0);

        assert_near(a.to_f64(), 3.5);
        assert_near(b.to_f64(), 2.0);
        assert_near((a + b).to_f64(), 5.5);
        assert_near((a - b).to_f64(), 1.5);
    }

    #[test]
    fn test_negative() {
        let a = FixedM31::new(-3.5);
        let b = FixedM31::new(2.0);

        assert_near(a.to_f64(), -3.5);
        assert_near((a + b).to_f64(), -1.5);
        assert_near((a - b).to_f64(), -5.5);
    }

    #[test]
    fn test_mul() {
        let mut rng = StdRng::seed_from_u64(42);

        for _ in 0..1000 {
            // Generate random values between -100 and 100
            let a = (rng.gen::<f64>() - 0.5) * 10.0;
            let b = (rng.gen::<f64>() - 0.5) * 10.0;

            let fa = FixedM31::new(a);
            let fb = FixedM31::new(b);

            let result = (fa * fb).to_f64();
            let expected = a * b;

            println!(
                "a: {}, b: {}, result: {}, expected: {}",
                a, b, result, expected
            );
            assert_near(result, expected);
        }
    }

    #[test]
    fn test_signed_div_rem() {
        // Test positive numbers
        let x = FixedM31(M31(100));
        let div = M31(7);
        let (q, r) = x.signed_div_rem(div);
        assert_eq!(q.0 .0, 14); // 100 ÷ 7 = 14
        assert_eq!(r.0 .0, 2); // 100 = 14 * 7 + 2

        // Test negative numbers
        let x = FixedM31(M31(P - 100)); // Represents -100
        let (q, r) = x.signed_div_rem(div);
        assert_eq!(q.0 .0, P - 15); // -100 ÷ 7 = -15 (represented as P - 15)
        assert_eq!(r.0 .0, 5); // -100 = -15 * 7 + 5

        // Test zero remainder
        let x = FixedM31(M31(21));
        let (q, r) = x.signed_div_rem(div);
        assert_eq!(q.0 .0, 3);
        assert_eq!(r.0 .0, 0);

        // Test negative number with zero remainder
        let x = FixedM31(M31(P - 21)); // Represents -21
        let (q, r) = x.signed_div_rem(div);
        assert_eq!(q.0 .0, P - 3); // Represents -3
        assert_eq!(r.0 .0, 0);
    }
}
